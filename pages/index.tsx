import type { NextPage } from 'next'
import Head from 'next/head'
import styled from '@emotion/styled'
import { useRef, useState } from 'react'
import Display from '@components/Display'
import StartButton from '@components/StartButton'
import Stage from '@components/Stage'
import { createStage, isColliding } from 'src/utils'
import { usePlayer } from '@hooks/usePlayer'
import { useStage } from '@hooks/useStage'
import { useInterval } from '@hooks/useInterval'
import { useGameStatus } from '@hooks/useGameStatus'
import { STAGE_HEIGHT } from '@constant/Block'

const Home: NextPage = () => {
  const [dropTime, setDropTime] = useState<null | number>(null)
  const [gameOver, setGameOver] = useState(true)
  const gameArea = useRef<HTMLDivElement>(null)

  const { player, updatePlayerPos, resetPlayer, playerRotate, pressSpace } =
    usePlayer()
  const { stage, setStage, rowsCleard } = useStage(player, resetPlayer)
  const { score, setScore, rows, setRows, level, setLevel } =
    useGameStatus(rowsCleard)

  const movePlayer = (dir: number) => {
    if (!isColliding(player, stage, { x: dir, y: 0 })) {
      updatePlayerPos({ x: dir, y: 0, collided: false })
    }
  }

  const pressSpaceKey = (dir: number) => {
    if (!isColliding(player, stage, { x: dir, y: STAGE_HEIGHT - 1 })) {
      // updatePlayerPos()
    }
  }

  const move = ({ key, repeat }: { key: string; repeat: boolean }): void => {
    // if(!gameOver)

    if (repeat) return

    switch (key) {
      case 'ArrowLeft':
        movePlayer(-1)
        break

      case 'ArrowRight':
        movePlayer(1)
        break

      case 'ArrowDown':
        if (repeat) return
        setDropTime(30)
        break

      case 'ArrowUp':
        playerRotate(stage)

        break

      case ' ':
        if (repeat) return
        pressSpace(stage, player.pos.x)
        break
    }
  }

  const keyUp = ({ keyCode }: { keyCode: number }): void => {
    // down
    if (keyCode === 40) {
      setDropTime(1000)
      // up
    } else if (keyCode === 38) {
      // 없음
    }
    if (keyCode === 50) {
      setDropTime(1000)
    }
  }

  const handleStartGame = (): void => {
    if (gameArea.current) gameArea.current.focus()

    setStage(createStage())
    setDropTime(1000)
    resetPlayer()
    setScore(0)
    setRows(0)
    setLevel(1)
    setGameOver(false)
  }

  const drop = (): void => {
    // 10줄 깨면 1레벨업
    if (rows > level * 10) {
      setLevel((prev) => prev + 1)
      setDropTime(1000 / level + 200)
    }

    if (!isColliding(player, stage, { x: 0, y: 1 })) {
      updatePlayerPos({ x: 0, y: 1, collided: false })
    } else {
      if (player.pos.y < 1) {
        setGameOver(true)
        setDropTime(null)
      }
      updatePlayerPos({ x: 0, y: 0, collided: true })
    }
  }

  useInterval(() => {
    drop()
  }, dropTime)

  return (
    <div>
      <Head>
        <title>후레임</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <StyledTetrisWrapper
        role="button"
        tabIndex={0}
        onKeyDown={move}
        onKeyUp={keyUp}
        ref={gameArea}
      >
        <StyledTetris>
          <div className="display">
            {gameOver ? (
              <>
                <Display gameOver={gameOver} text="Game Over..." />
                <StartButton callback={handleStartGame} />
              </>
            ) : (
              <>
                <Display text={`Score: ${score}`} />
                <Display text={`Rows: ${rows}`} />
                <Display text={`Level: ${level}`} />
              </>
            )}
          </div>

          <Stage stage={stage} />
        </StyledTetris>

        <Copyright>
          <a
            href="https://kr.freepik.com/free-vector/deep-forest-with-sunny-glade-green-grass-and-tree-trunks-silhouettes-vector-cartoon-illustration-of-summer-woods-landscape-with-sunshine-beams-jungle-panorama-with-green-lawn_24025354.htm#query=game%20background&position=3&from_view=keyword"
            target="new"
          >
            작가 upklyak
          </a>
          &nbsp; 출처 Freepik
        </Copyright>

        {/* <Image
          src="/background.jpg"
          layout="fill"
          objectFit="cover"
          objectPosition="center"
          alt="background"
          priority
          style={{ zIndex: '0' }}
        /> */}
      </StyledTetrisWrapper>
    </div>
  )
}

export const StyledTetrisWrapper = styled.div`
  width: 100%;
  height: 100vh;
  overflow: hidden;
  outline: none;
  background-color: #dfdfbd;
  position: relative;
`

export const StyledTetris = styled.div`
  z-index: 2;
  display: flex;
  flex-direction: column;
  align-items: center;
  padding: 40px;
  margin: 0 auto;
  .display {
    display: flex;
    justify-content: space-between;
    width: 380px;
  }
`

export const Copyright = styled.p`
  z-index: 2;
  font-size: 1.2rem;
  position: absolute;
  bottom: 0;
  right: 10px;
  color: #e2e2e2;

  &:hover {
    color: #c2c2c2;
  }
`

export default Home
